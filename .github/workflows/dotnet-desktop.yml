name: Build and Publish NuGet Package

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-pack:
    runs-on: windows-latest

    steps:
    # Checkout the repository
    - name: Checkout
      uses: actions/checkout@v4

    # Set up .NET
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    # Restore dependencies
    - name: Restore dependencies
      run: dotnet restore src/LazyFramework.DX.csproj --source https://api.nuget.org/v3/index.json --source https://pkgs.dev.azure.com/uipath/Public.Feeds/_packaging/UiPath-Official/nuget/v3/index.json

    # Build the project (no packaging yet)
    - name: Build
      run: dotnet build src/LazyFramework.DX.csproj --configuration Release

    # Create the NuGet package
    - name: Pack NuGet package (without UiPath.Activities.Api)
      run: |
        echo "Packing the NuGet package without UiPath.Activities.Api..."
        dotnet pack src/LazyFramework.DX.csproj --configuration Release --output ./artifacts /p:PackStage=true

    # Cache artifacts
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4.4.3
      with:
        # Artifact name
        name:  "artifacts" # optional, default is artifact
        # A file, directory or wildcard pattern that describes what to upload
        path: "./artifacts"
        if-no-files-found: error
  # Publish job
  publish:
    runs-on: windows-latest
    needs: build-and-pack
    
    steps:
    - name: Download a Build Artifact
      uses: actions/download-artifact@v4.1.8
      with:
        # Name of the artifact to download. If unspecified, all artifacts for the run are downloaded.
        name: "artifact" # optional
        # Destination path. Supports basic tilde expansion. Defaults to $GITHUB_WORKSPACE
        path: "./artifacts" # optional

    # Capture the .nupkg file path
    - name: Get .nupkg file path
      id: get_nupkg_path
      shell: bash
      run: |
        # Capture the full path of the .nupkg file
        PACKAGE_PATH=$(find ./artifacts -name "*.nupkg" | head -n 1)
        echo "PACKAGE_PATH=$PACKAGE_PATH" >> $GITHUB_ENV
        echo "Package path is $PACKAGE_PATH"

    # Publish to NuGet
    - name: Publish to NuGet
      run: |
        echo "Publishing package to NuGet..."
        dotnet nuget push ${{ env.PACKAGE_PATH }} --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

    # Publish to GitHub
    - name: Publish to GitHub
      run: |
        echo "Publishing package to GitHub..."
        dotnet nuget push ${{ env.PACKAGE_PATH }} --api-key ${{ secrets.TOKEN_GITHUB }} --source "https://nuget.pkg.github.com/yashbrahmbhatt/index.json"

    # Optionally, create a GitHub release (this step is currently commented out)
    # - name: Create GitHub Release
    #   uses: actions/github-script@v7
    #   with:
    #     script: |
    #       const packagePath = process.env.PACKAGE_PATH;
    #       const version = packagePath.replace("LazyFramework.DX.","");
    #       
    #       const release = await github.rest.repos.createRelease({
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         tag_name: `v${version}`,
    #         name: `Release v${version}`,
    #         body: `Release notes for version ${version}.`,
    #         draft: false,
    #         prerelease: false
    #       });
    #       await github.rest.repos.uploadReleaseAsset({
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         release_id: release.data.id,
    #         name: `LazyFramework.DX-${version}.nupkg`,
    #         data: require('fs').createReadStream(packagePath)
    #       });
